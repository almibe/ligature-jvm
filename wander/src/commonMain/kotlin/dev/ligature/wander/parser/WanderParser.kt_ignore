/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

package dev.ligature.wander.parser

import dev.ligature.IntegerLiteral
import dev.ligature.Identifier
import dev.ligature.StringLiteral

import dev.ligature.wander.lexer.Token
import dev.ligature.wander.lexer.TokenType

import arrow.core.Some
import arrow.core.Either
import arrow.core.None
import arrow.core.none
import dev.ligature.gaze.*

fun parse(script: List<Token>): Either<String, Script> {
  val filteredInput = script.filter { token: Token ->
    token.tokenType != TokenType.Comment && token.tokenType != TokenType.Spaces && token.tokenType != TokenType.NewLine
  }.toList()
  val gaze = Gaze(filteredInput)
  val res = gaze.attempt(scriptNib)
  return when(res) {
    is None ->
      if (gaze.isComplete) {
        Either.Right(Script(listOf()))
      } else {
        Either.Left("No Match")
      }
    // TODO some case also needs to check if gaze is complete
    is Some ->
      if (gaze.isComplete) {
        Either.Right(Script(res.value)) // .filter(_.isDefined).map(_.get)))
      } else {
        Either.Left("No Match")
      }
  }
}
